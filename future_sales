{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7a48817",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:27.090699Z",
     "iopub.status.busy": "2024-12-19T04:55:27.090266Z",
     "iopub.status.idle": "2024-12-19T04:55:27.496367Z",
     "shell.execute_reply": "2024-12-19T04:55:27.495178Z"
    },
    "papermill": {
     "duration": 0.418741,
     "end_time": "2024-12-19T04:55:27.498174",
     "exception": false,
     "start_time": "2024-12-19T04:55:27.079433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/solution.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6521c33e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:27.519466Z",
     "iopub.status.busy": "2024-12-19T04:55:27.518961Z",
     "iopub.status.idle": "2024-12-19T04:55:29.235929Z",
     "shell.execute_reply": "2024-12-19T04:55:29.234874Z"
    },
    "papermill": {
     "duration": 1.730337,
     "end_time": "2024-12-19T04:55:29.237913",
     "exception": false,
     "start_time": "2024-12-19T04:55:27.507576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3947a916",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:29.258512Z",
     "iopub.status.busy": "2024-12-19T04:55:29.257970Z",
     "iopub.status.idle": "2024-12-19T04:55:37.502913Z",
     "shell.execute_reply": "2024-12-19T04:55:37.501701Z"
    },
    "papermill": {
     "duration": 8.256872,
     "end_time": "2024-12-19T04:55:37.504960",
     "exception": false,
     "start_time": "2024-12-19T04:55:29.248088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sales_train = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv')\n",
    "sales_test = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv')\n",
    "inventory = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv')\n",
    "calendar = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv')\n",
    "test_weights = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "93f215b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:37.524283Z",
     "iopub.status.busy": "2024-12-19T04:55:37.523848Z",
     "iopub.status.idle": "2024-12-19T04:55:37.554263Z",
     "shell.execute_reply": "2024-12-19T04:55:37.553124Z"
    },
    "papermill": {
     "duration": 0.042072,
     "end_time": "2024-12-19T04:55:37.556309",
     "exception": false,
     "start_time": "2024-12-19T04:55:37.514237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>date</th>\n",
       "      <th>warehouse</th>\n",
       "      <th>total_orders</th>\n",
       "      <th>sales</th>\n",
       "      <th>sell_price_main</th>\n",
       "      <th>availability</th>\n",
       "      <th>type_0_discount</th>\n",
       "      <th>type_1_discount</th>\n",
       "      <th>type_2_discount</th>\n",
       "      <th>type_3_discount</th>\n",
       "      <th>type_4_discount</th>\n",
       "      <th>type_5_discount</th>\n",
       "      <th>type_6_discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4845</td>\n",
       "      <td>2024-03-10</td>\n",
       "      <td>Budapest_1</td>\n",
       "      <td>6436.0</td>\n",
       "      <td>16.34</td>\n",
       "      <td>646.26</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.15312</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4845</td>\n",
       "      <td>2021-05-25</td>\n",
       "      <td>Budapest_1</td>\n",
       "      <td>4663.0</td>\n",
       "      <td>12.63</td>\n",
       "      <td>455.96</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.15025</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4845</td>\n",
       "      <td>2021-12-20</td>\n",
       "      <td>Budapest_1</td>\n",
       "      <td>6507.0</td>\n",
       "      <td>34.55</td>\n",
       "      <td>455.96</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.15025</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4845</td>\n",
       "      <td>2023-04-29</td>\n",
       "      <td>Budapest_1</td>\n",
       "      <td>5463.0</td>\n",
       "      <td>34.52</td>\n",
       "      <td>646.26</td>\n",
       "      <td>0.96</td>\n",
       "      <td>0.20024</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.15312</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4845</td>\n",
       "      <td>2022-04-01</td>\n",
       "      <td>Budapest_1</td>\n",
       "      <td>5997.0</td>\n",
       "      <td>35.92</td>\n",
       "      <td>486.41</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.15649</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   unique_id        date   warehouse  total_orders  sales  sell_price_main  \\\n",
       "0       4845  2024-03-10  Budapest_1        6436.0  16.34           646.26   \n",
       "1       4845  2021-05-25  Budapest_1        4663.0  12.63           455.96   \n",
       "2       4845  2021-12-20  Budapest_1        6507.0  34.55           455.96   \n",
       "3       4845  2023-04-29  Budapest_1        5463.0  34.52           646.26   \n",
       "4       4845  2022-04-01  Budapest_1        5997.0  35.92           486.41   \n",
       "\n",
       "   availability  type_0_discount  type_1_discount  type_2_discount  \\\n",
       "0          1.00          0.00000              0.0              0.0   \n",
       "1          1.00          0.00000              0.0              0.0   \n",
       "2          1.00          0.00000              0.0              0.0   \n",
       "3          0.96          0.20024              0.0              0.0   \n",
       "4          1.00          0.00000              0.0              0.0   \n",
       "\n",
       "   type_3_discount  type_4_discount  type_5_discount  type_6_discount  \n",
       "0              0.0          0.15312              0.0              0.0  \n",
       "1              0.0          0.15025              0.0              0.0  \n",
       "2              0.0          0.15025              0.0              0.0  \n",
       "3              0.0          0.15312              0.0              0.0  \n",
       "4              0.0          0.15649              0.0              0.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load first few rows\n",
    "sales_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7b3d96c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:37.576418Z",
     "iopub.status.busy": "2024-12-19T04:55:37.576016Z",
     "iopub.status.idle": "2024-12-19T04:55:37.582249Z",
     "shell.execute_reply": "2024-12-19T04:55:37.581153Z"
    },
    "papermill": {
     "duration": 0.018537,
     "end_time": "2024-12-19T04:55:37.584334",
     "exception": false,
     "start_time": "2024-12-19T04:55:37.565797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4007419, 14)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales_train.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cb856424",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:37.605423Z",
     "iopub.status.busy": "2024-12-19T04:55:37.604914Z",
     "iopub.status.idle": "2024-12-19T04:55:37.834396Z",
     "shell.execute_reply": "2024-12-19T04:55:37.833382Z"
    },
    "papermill": {
     "duration": 0.241923,
     "end_time": "2024-12-19T04:55:37.836377",
     "exception": false,
     "start_time": "2024-12-19T04:55:37.594454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# 2. Randomly select a percentage of rows (e.g., 10% of the dataset)\n",
    "sales_train= sales_train.sample(frac=0.01, random_state=42) \n",
    "# 2. Randomly select a percentage of rows (e.g., 10% of the dataset)\n",
    "sales_test= sales_test.sample(frac=0.01, random_state=42) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "01aa3bc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:37.855580Z",
     "iopub.status.busy": "2024-12-19T04:55:37.855231Z",
     "iopub.status.idle": "2024-12-19T04:55:37.872278Z",
     "shell.execute_reply": "2024-12-19T04:55:37.871121Z"
    },
    "papermill": {
     "duration": 0.028618,
     "end_time": "2024-12-19T04:55:37.874028",
     "exception": false,
     "start_time": "2024-12-19T04:55:37.845410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>date</th>\n",
       "      <th>warehouse</th>\n",
       "      <th>total_orders</th>\n",
       "      <th>sell_price_main</th>\n",
       "      <th>type_0_discount</th>\n",
       "      <th>type_1_discount</th>\n",
       "      <th>type_2_discount</th>\n",
       "      <th>type_3_discount</th>\n",
       "      <th>type_4_discount</th>\n",
       "      <th>type_5_discount</th>\n",
       "      <th>type_6_discount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16750</th>\n",
       "      <td>2947</td>\n",
       "      <td>2024-06-04</td>\n",
       "      <td>Prague_1</td>\n",
       "      <td>9698.0</td>\n",
       "      <td>50.44</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.01961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29705</th>\n",
       "      <td>662</td>\n",
       "      <td>2024-06-16</td>\n",
       "      <td>Budapest_1</td>\n",
       "      <td>6113.0</td>\n",
       "      <td>1255.17</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23432</th>\n",
       "      <td>1252</td>\n",
       "      <td>2024-06-12</td>\n",
       "      <td>Prague_2</td>\n",
       "      <td>6108.0</td>\n",
       "      <td>199.06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28770</th>\n",
       "      <td>3668</td>\n",
       "      <td>2024-06-14</td>\n",
       "      <td>Brno_1</td>\n",
       "      <td>10363.0</td>\n",
       "      <td>19.61</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29867</th>\n",
       "      <td>1731</td>\n",
       "      <td>2024-06-05</td>\n",
       "      <td>Frankfurt_1</td>\n",
       "      <td>1643.0</td>\n",
       "      <td>1.53</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       unique_id        date    warehouse  total_orders  sell_price_main  \\\n",
       "16750       2947  2024-06-04     Prague_1        9698.0            50.44   \n",
       "29705        662  2024-06-16   Budapest_1        6113.0          1255.17   \n",
       "23432       1252  2024-06-12     Prague_2        6108.0           199.06   \n",
       "28770       3668  2024-06-14       Brno_1       10363.0            19.61   \n",
       "29867       1731  2024-06-05  Frankfurt_1        1643.0             1.53   \n",
       "\n",
       "       type_0_discount  type_1_discount  type_2_discount  type_3_discount  \\\n",
       "16750              0.0              0.0              0.0              0.0   \n",
       "29705              0.0              0.0              0.0              0.0   \n",
       "23432              0.0              0.0              0.0              0.0   \n",
       "28770              0.0              0.0              0.0              0.0   \n",
       "29867              0.0              0.0              0.0              0.0   \n",
       "\n",
       "       type_4_discount  type_5_discount  type_6_discount  \n",
       "16750              0.0              0.0          0.01961  \n",
       "29705              0.0              0.0          0.00000  \n",
       "23432              0.0              0.0          0.00000  \n",
       "28770              0.0              0.0          0.00000  \n",
       "29867              0.0              0.0          0.00000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales_test.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6b0d832f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:37.895105Z",
     "iopub.status.busy": "2024-12-19T04:55:37.894478Z",
     "iopub.status.idle": "2024-12-19T04:55:37.906211Z",
     "shell.execute_reply": "2024-12-19T04:55:37.905216Z"
    },
    "papermill": {
     "duration": 0.024322,
     "end_time": "2024-12-19T04:55:37.907946",
     "exception": false,
     "start_time": "2024-12-19T04:55:37.883624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>holiday_name</th>\n",
       "      <th>holiday</th>\n",
       "      <th>shops_closed</th>\n",
       "      <th>winter_school_holidays</th>\n",
       "      <th>school_holidays</th>\n",
       "      <th>warehouse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-03-16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Frankfurt_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-03-22</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Frankfurt_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-02-07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Frankfurt_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-08-10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Frankfurt_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-10-26</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Prague_2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date holiday_name  holiday  shops_closed  winter_school_holidays  \\\n",
       "0  2022-03-16          NaN        0             0                       0   \n",
       "1  2020-03-22          NaN        0             0                       0   \n",
       "2  2018-02-07          NaN        0             0                       0   \n",
       "3  2018-08-10          NaN        0             0                       0   \n",
       "4  2017-10-26          NaN        0             0                       0   \n",
       "\n",
       "   school_holidays    warehouse  \n",
       "0                0  Frankfurt_1  \n",
       "1                0  Frankfurt_1  \n",
       "2                0  Frankfurt_1  \n",
       "3                0  Frankfurt_1  \n",
       "4                0     Prague_2  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calendar.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "09508ddc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:37.928420Z",
     "iopub.status.busy": "2024-12-19T04:55:37.928008Z",
     "iopub.status.idle": "2024-12-19T04:55:37.940116Z",
     "shell.execute_reply": "2024-12-19T04:55:37.939159Z"
    },
    "papermill": {
     "duration": 0.024296,
     "end_time": "2024-12-19T04:55:37.941874",
     "exception": false,
     "start_time": "2024-12-19T04:55:37.917578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>product_unique_id</th>\n",
       "      <th>name</th>\n",
       "      <th>L1_category_name_en</th>\n",
       "      <th>L2_category_name_en</th>\n",
       "      <th>L3_category_name_en</th>\n",
       "      <th>L4_category_name_en</th>\n",
       "      <th>warehouse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5255</td>\n",
       "      <td>2583</td>\n",
       "      <td>Pastry_196</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>Bakery_L2_14</td>\n",
       "      <td>Bakery_L3_26</td>\n",
       "      <td>Bakery_L4_1</td>\n",
       "      <td>Prague_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4948</td>\n",
       "      <td>2426</td>\n",
       "      <td>Herb_19</td>\n",
       "      <td>Fruit and vegetable</td>\n",
       "      <td>Fruit and vegetable_L2_30</td>\n",
       "      <td>Fruit and vegetable_L3_86</td>\n",
       "      <td>Fruit and vegetable_L4_1</td>\n",
       "      <td>Prague_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2146</td>\n",
       "      <td>1079</td>\n",
       "      <td>Beet_2</td>\n",
       "      <td>Fruit and vegetable</td>\n",
       "      <td>Fruit and vegetable_L2_3</td>\n",
       "      <td>Fruit and vegetable_L3_65</td>\n",
       "      <td>Fruit and vegetable_L4_34</td>\n",
       "      <td>Prague_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>501</td>\n",
       "      <td>260</td>\n",
       "      <td>Chicken_13</td>\n",
       "      <td>Meat and fish</td>\n",
       "      <td>Meat and fish_L2_13</td>\n",
       "      <td>Meat and fish_L3_27</td>\n",
       "      <td>Meat and fish_L4_5</td>\n",
       "      <td>Prague_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4461</td>\n",
       "      <td>2197</td>\n",
       "      <td>Chicory_1</td>\n",
       "      <td>Fruit and vegetable</td>\n",
       "      <td>Fruit and vegetable_L2_17</td>\n",
       "      <td>Fruit and vegetable_L3_33</td>\n",
       "      <td>Fruit and vegetable_L4_1</td>\n",
       "      <td>Frankfurt_1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   unique_id  product_unique_id        name  L1_category_name_en  \\\n",
       "0       5255               2583  Pastry_196               Bakery   \n",
       "1       4948               2426     Herb_19  Fruit and vegetable   \n",
       "2       2146               1079      Beet_2  Fruit and vegetable   \n",
       "3        501                260  Chicken_13        Meat and fish   \n",
       "4       4461               2197   Chicory_1  Fruit and vegetable   \n",
       "\n",
       "         L2_category_name_en        L3_category_name_en  \\\n",
       "0               Bakery_L2_14               Bakery_L3_26   \n",
       "1  Fruit and vegetable_L2_30  Fruit and vegetable_L3_86   \n",
       "2   Fruit and vegetable_L2_3  Fruit and vegetable_L3_65   \n",
       "3        Meat and fish_L2_13        Meat and fish_L3_27   \n",
       "4  Fruit and vegetable_L2_17  Fruit and vegetable_L3_33   \n",
       "\n",
       "         L4_category_name_en    warehouse  \n",
       "0                Bakery_L4_1     Prague_3  \n",
       "1   Fruit and vegetable_L4_1     Prague_3  \n",
       "2  Fruit and vegetable_L4_34     Prague_1  \n",
       "3         Meat and fish_L4_5     Prague_1  \n",
       "4   Fruit and vegetable_L4_1  Frankfurt_1  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inventory.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "90a488a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:37.963124Z",
     "iopub.status.busy": "2024-12-19T04:55:37.962772Z",
     "iopub.status.idle": "2024-12-19T04:55:38.060104Z",
     "shell.execute_reply": "2024-12-19T04:55:38.058857Z"
    },
    "papermill": {
     "duration": 0.110611,
     "end_time": "2024-12-19T04:55:38.062232",
     "exception": false,
     "start_time": "2024-12-19T04:55:37.951621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Merge calendar data to add holiday information\n",
    "sales_train = pd.merge(sales_train, calendar[['date', 'holiday', 'holiday_name']], how='left', on='date')\n",
    "sales_test = pd.merge(sales_test, calendar[['date', 'holiday', 'holiday_name']], how='left', on='date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3c4524bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:38.083181Z",
     "iopub.status.busy": "2024-12-19T04:55:38.082823Z",
     "iopub.status.idle": "2024-12-19T04:55:38.169757Z",
     "shell.execute_reply": "2024-12-19T04:55:38.168245Z"
    },
    "papermill": {
     "duration": 0.099862,
     "end_time": "2024-12-19T04:55:38.172003",
     "exception": false,
     "start_time": "2024-12-19T04:55:38.072141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Merge inventory data to get product category and name\n",
    "sales_train = pd.merge(sales_train, inventory[['unique_id', 'product_unique_id', 'name', 'L1_category_name_en']], how='left', on='unique_id')\n",
    "sales_test = pd.merge(sales_test, inventory[['unique_id', 'product_unique_id', 'name', 'L1_category_name_en']], how='left', on='unique_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1abf3110",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:38.192457Z",
     "iopub.status.busy": "2024-12-19T04:55:38.192075Z",
     "iopub.status.idle": "2024-12-19T04:55:38.213227Z",
     "shell.execute_reply": "2024-12-19T04:55:38.212131Z"
    },
    "papermill": {
     "duration": 0.03351,
     "end_time": "2024-12-19T04:55:38.215248",
     "exception": false,
     "start_time": "2024-12-19T04:55:38.181738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>date</th>\n",
       "      <th>warehouse</th>\n",
       "      <th>total_orders</th>\n",
       "      <th>sales</th>\n",
       "      <th>sell_price_main</th>\n",
       "      <th>availability</th>\n",
       "      <th>type_0_discount</th>\n",
       "      <th>type_1_discount</th>\n",
       "      <th>type_2_discount</th>\n",
       "      <th>type_3_discount</th>\n",
       "      <th>type_4_discount</th>\n",
       "      <th>type_5_discount</th>\n",
       "      <th>type_6_discount</th>\n",
       "      <th>holiday</th>\n",
       "      <th>holiday_name</th>\n",
       "      <th>product_unique_id</th>\n",
       "      <th>name</th>\n",
       "      <th>L1_category_name_en</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>Brno_1</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>Fruit and vegetable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>Brno_1</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>Fruit and vegetable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>Brno_1</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>Fruit and vegetable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>Brno_1</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>Fruit and vegetable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>Brno_1</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>Fruit and vegetable</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   unique_id        date warehouse  total_orders  sales  sell_price_main  \\\n",
       "0       3197  2021-02-06    Brno_1        7228.0  62.88            42.65   \n",
       "1       3197  2021-02-06    Brno_1        7228.0  62.88            42.65   \n",
       "2       3197  2021-02-06    Brno_1        7228.0  62.88            42.65   \n",
       "3       3197  2021-02-06    Brno_1        7228.0  62.88            42.65   \n",
       "4       3197  2021-02-06    Brno_1        7228.0  62.88            42.65   \n",
       "\n",
       "   availability  type_0_discount  type_1_discount  type_2_discount  \\\n",
       "0          0.55              0.0              0.0              0.0   \n",
       "1          0.55              0.0              0.0              0.0   \n",
       "2          0.55              0.0              0.0              0.0   \n",
       "3          0.55              0.0              0.0              0.0   \n",
       "4          0.55              0.0              0.0              0.0   \n",
       "\n",
       "   type_3_discount  type_4_discount  type_5_discount  type_6_discount  \\\n",
       "0              0.0              0.0              0.0              0.0   \n",
       "1              0.0              0.0              0.0              0.0   \n",
       "2              0.0              0.0              0.0              0.0   \n",
       "3              0.0              0.0              0.0              0.0   \n",
       "4              0.0              0.0              0.0              0.0   \n",
       "\n",
       "   holiday holiday_name  product_unique_id         name  L1_category_name_en  \n",
       "0        0          NaN               1577  Coriander_6  Fruit and vegetable  \n",
       "1        0          NaN               1577  Coriander_6  Fruit and vegetable  \n",
       "2        0          NaN               1577  Coriander_6  Fruit and vegetable  \n",
       "3        0          NaN               1577  Coriander_6  Fruit and vegetable  \n",
       "4        0          NaN               1577  Coriander_6  Fruit and vegetable  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales_train.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "662e9ab2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:38.237375Z",
     "iopub.status.busy": "2024-12-19T04:55:38.236951Z",
     "iopub.status.idle": "2024-12-19T04:55:38.324588Z",
     "shell.execute_reply": "2024-12-19T04:55:38.323140Z"
    },
    "papermill": {
     "duration": 0.101081,
     "end_time": "2024-12-19T04:55:38.326566",
     "exception": false,
     "start_time": "2024-12-19T04:55:38.225485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 280518 entries, 0 to 280517\n",
      "Data columns (total 19 columns):\n",
      " #   Column               Non-Null Count   Dtype  \n",
      "---  ------               --------------   -----  \n",
      " 0   unique_id            280518 non-null  int64  \n",
      " 1   date                 280518 non-null  object \n",
      " 2   warehouse            280518 non-null  object \n",
      " 3   total_orders         280518 non-null  float64\n",
      " 4   sales                280518 non-null  float64\n",
      " 5   sell_price_main      280518 non-null  float64\n",
      " 6   availability         280518 non-null  float64\n",
      " 7   type_0_discount      280518 non-null  float64\n",
      " 8   type_1_discount      280518 non-null  float64\n",
      " 9   type_2_discount      280518 non-null  float64\n",
      " 10  type_3_discount      280518 non-null  float64\n",
      " 11  type_4_discount      280518 non-null  float64\n",
      " 12  type_5_discount      280518 non-null  float64\n",
      " 13  type_6_discount      280518 non-null  float64\n",
      " 14  holiday              280518 non-null  int64  \n",
      " 15  holiday_name         11598 non-null   object \n",
      " 16  product_unique_id    280518 non-null  int64  \n",
      " 17  name                 280518 non-null  object \n",
      " 18  L1_category_name_en  280518 non-null  object \n",
      "dtypes: float64(11), int64(3), object(5)\n",
      "memory usage: 40.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# Display basic information about the datase\n",
    "sales_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ea319e39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:38.350905Z",
     "iopub.status.busy": "2024-12-19T04:55:38.350302Z",
     "iopub.status.idle": "2024-12-19T04:55:38.512489Z",
     "shell.execute_reply": "2024-12-19T04:55:38.511330Z"
    },
    "papermill": {
     "duration": 0.177295,
     "end_time": "2024-12-19T04:55:38.514707",
     "exception": false,
     "start_time": "2024-12-19T04:55:38.337412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>total_orders</th>\n",
       "      <th>sales</th>\n",
       "      <th>sell_price_main</th>\n",
       "      <th>availability</th>\n",
       "      <th>type_0_discount</th>\n",
       "      <th>type_1_discount</th>\n",
       "      <th>type_2_discount</th>\n",
       "      <th>type_3_discount</th>\n",
       "      <th>type_4_discount</th>\n",
       "      <th>type_5_discount</th>\n",
       "      <th>type_6_discount</th>\n",
       "      <th>holiday</th>\n",
       "      <th>product_unique_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "      <td>280518.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2734.425937</td>\n",
       "      <td>5997.138668</td>\n",
       "      <td>110.026226</td>\n",
       "      <td>184.335022</td>\n",
       "      <td>0.926310</td>\n",
       "      <td>0.008238</td>\n",
       "      <td>0.000078</td>\n",
       "      <td>0.001004</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.005542</td>\n",
       "      <td>0.000430</td>\n",
       "      <td>0.010657</td>\n",
       "      <td>0.042304</td>\n",
       "      <td>1354.117183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1561.019708</td>\n",
       "      <td>2476.420901</td>\n",
       "      <td>383.823689</td>\n",
       "      <td>464.020797</td>\n",
       "      <td>0.178999</td>\n",
       "      <td>0.047885</td>\n",
       "      <td>0.004075</td>\n",
       "      <td>0.017106</td>\n",
       "      <td>0.000937</td>\n",
       "      <td>0.028639</td>\n",
       "      <td>0.009061</td>\n",
       "      <td>0.056149</td>\n",
       "      <td>0.201282</td>\n",
       "      <td>760.466103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>464.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1383.000000</td>\n",
       "      <td>4397.000000</td>\n",
       "      <td>17.780000</td>\n",
       "      <td>20.970000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>702.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2731.000000</td>\n",
       "      <td>5509.000000</td>\n",
       "      <td>39.630000</td>\n",
       "      <td>45.890000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1353.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4089.000000</td>\n",
       "      <td>8017.000000</td>\n",
       "      <td>94.720000</td>\n",
       "      <td>111.990000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5431.000000</td>\n",
       "      <td>18475.000000</td>\n",
       "      <td>16095.140000</td>\n",
       "      <td>11467.180000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.785410</td>\n",
       "      <td>0.330070</td>\n",
       "      <td>0.502790</td>\n",
       "      <td>0.166940</td>\n",
       "      <td>0.445390</td>\n",
       "      <td>0.600630</td>\n",
       "      <td>0.899660</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2669.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           unique_id   total_orders          sales  sell_price_main  \\\n",
       "count  280518.000000  280518.000000  280518.000000    280518.000000   \n",
       "mean     2734.425937    5997.138668     110.026226       184.335022   \n",
       "std      1561.019708    2476.420901     383.823689       464.020797   \n",
       "min         0.000000     464.000000       0.000000         0.120000   \n",
       "25%      1383.000000    4397.000000      17.780000        20.970000   \n",
       "50%      2731.000000    5509.000000      39.630000        45.890000   \n",
       "75%      4089.000000    8017.000000      94.720000       111.990000   \n",
       "max      5431.000000   18475.000000   16095.140000     11467.180000   \n",
       "\n",
       "        availability  type_0_discount  type_1_discount  type_2_discount  \\\n",
       "count  280518.000000    280518.000000    280518.000000    280518.000000   \n",
       "mean        0.926310         0.008238         0.000078         0.001004   \n",
       "std         0.178999         0.047885         0.004075         0.017106   \n",
       "min         0.010000         0.000000         0.000000         0.000000   \n",
       "25%         1.000000         0.000000         0.000000         0.000000   \n",
       "50%         1.000000         0.000000         0.000000         0.000000   \n",
       "75%         1.000000         0.000000         0.000000         0.000000   \n",
       "max         1.000000         0.785410         0.330070         0.502790   \n",
       "\n",
       "       type_3_discount  type_4_discount  type_5_discount  type_6_discount  \\\n",
       "count    280518.000000    280518.000000    280518.000000    280518.000000   \n",
       "mean          0.000006         0.005542         0.000430         0.010657   \n",
       "std           0.000937         0.028639         0.009061         0.056149   \n",
       "min           0.000000         0.000000         0.000000         0.000000   \n",
       "25%           0.000000         0.000000         0.000000         0.000000   \n",
       "50%           0.000000         0.000000         0.000000         0.000000   \n",
       "75%           0.000000         0.000000         0.000000         0.000000   \n",
       "max           0.166940         0.445390         0.600630         0.899660   \n",
       "\n",
       "             holiday  product_unique_id  \n",
       "count  280518.000000      280518.000000  \n",
       "mean        0.042304        1354.117183  \n",
       "std         0.201282         760.466103  \n",
       "min         0.000000           0.000000  \n",
       "25%         0.000000         702.000000  \n",
       "50%         0.000000        1353.000000  \n",
       "75%         0.000000        2008.000000  \n",
       "max         1.000000        2669.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summary statistics\n",
    "sales_train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8cce6200",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:38.536821Z",
     "iopub.status.busy": "2024-12-19T04:55:38.536477Z",
     "iopub.status.idle": "2024-12-19T04:55:38.610033Z",
     "shell.execute_reply": "2024-12-19T04:55:38.608937Z"
    },
    "papermill": {
     "duration": 0.086685,
     "end_time": "2024-12-19T04:55:38.611932",
     "exception": false,
     "start_time": "2024-12-19T04:55:38.525247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unique_id                   0\n",
       "date                        0\n",
       "warehouse                   0\n",
       "total_orders                0\n",
       "sales                       0\n",
       "sell_price_main             0\n",
       "availability                0\n",
       "type_0_discount             0\n",
       "type_1_discount             0\n",
       "type_2_discount             0\n",
       "type_3_discount             0\n",
       "type_4_discount             0\n",
       "type_5_discount             0\n",
       "type_6_discount             0\n",
       "holiday                     0\n",
       "holiday_name           268920\n",
       "product_unique_id           0\n",
       "name                        0\n",
       "L1_category_name_en         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for missing values\n",
    "sales_train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4de6f571",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:38.634883Z",
     "iopub.status.busy": "2024-12-19T04:55:38.634520Z",
     "iopub.status.idle": "2024-12-19T04:55:40.282779Z",
     "shell.execute_reply": "2024-12-19T04:55:40.281718Z"
    },
    "papermill": {
     "duration": 1.661853,
     "end_time": "2024-12-19T04:55:40.284547",
     "exception": false,
     "start_time": "2024-12-19T04:55:38.622694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.histplot(sales_train['sales'], bins=30, kde=True)\n",
    "plt.title('Distribution of Sales ')\n",
    "plt.xlabel('Sales ')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3bb512e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:40.308299Z",
     "iopub.status.busy": "2024-12-19T04:55:40.307918Z",
     "iopub.status.idle": "2024-12-19T04:55:40.371001Z",
     "shell.execute_reply": "2024-12-19T04:55:40.370057Z"
    },
    "papermill": {
     "duration": 0.07744,
     "end_time": "2024-12-19T04:55:40.372912",
     "exception": false,
     "start_time": "2024-12-19T04:55:40.295472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert 'Date' to datetime format\n",
    "sales_train['date'] = pd.to_datetime(sales_train['date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3902292b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:40.395920Z",
     "iopub.status.busy": "2024-12-19T04:55:40.395554Z",
     "iopub.status.idle": "2024-12-19T04:55:40.408916Z",
     "shell.execute_reply": "2024-12-19T04:55:40.407617Z"
    },
    "papermill": {
     "duration": 0.027035,
     "end_time": "2024-12-19T04:55:40.410860",
     "exception": false,
     "start_time": "2024-12-19T04:55:40.383825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Group by date and sum the sales for that date\n",
    "sales_by_date = sales_train.groupby('date')['sales'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "25acaa74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:40.433890Z",
     "iopub.status.busy": "2024-12-19T04:55:40.433546Z",
     "iopub.status.idle": "2024-12-19T04:55:40.930543Z",
     "shell.execute_reply": "2024-12-19T04:55:40.929455Z"
    },
    "papermill": {
     "duration": 0.510856,
     "end_time": "2024-12-19T04:55:40.932662",
     "exception": false,
     "start_time": "2024-12-19T04:55:40.421806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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eUXHH398ynoNFx8IiBo2bAgAaNmyZdL3kUgktl3MLhMREWUuttkmIiJyWG5uLs4991yce+65OO2003DLLbdg9uzZeOihh/D999+jZ8+eaNu2LSZOnIiWLVsiNzcXJSUleOaZZzQD4kgkgg4dOmDixImKv4uBYu3atbFo0SJ8/PHHeO+99zB//ny88cYbuOyyy7BgwQJkZ2drlj8UCuku45VXXok6dergzTffxAUXXIA333wTWVlZ6N+/f0J5Q6EQ3n//fcV51qtXL+GzNOPvNrV1oPa9mME3u0xERJS5GGwTERG5SOyZe+fOnQCAefPmobKyEnPnzk3IrhqpfnzyySdjzZo16Nmzp25AnJWVhZ49e6Jnz56YOHEi/v73v+Nvf/sbPv74YxQWFiqO07p1a0QiEXz77bc444wzYt/v2rUL+/fvR+vWrWPf1a1bF1dccQVmz56NiRMn4o033kCPHj3QokWLhPJGo1G0adMmln0PunRcJiIicgerkRMRETng448/Tmi/LBLbQZ9++ukA4plT6bAHDhzAq6++qjuP3//+9/jpp5/w4osvJv125MgRHDp0CACwd+/epN87deoEAIqvsRIVFxcDAJ599tmE78VMet++fRO+v/7667Fjxw689NJLWLNmTUIVcgD43e9+h+zsbIwdOzZp3USjUfzyyy+qZfGrdFwmIiJyBzPbREREDvjzn/+Mw4cP45prrkHbtm1RVVWFpUuX4o033sCJJ54Y6/ird+/eyM3NxZVXXok//elPOHjwIF588UU0bdo0lv1Wc9NNN+HNN9/E7bffjo8//hgXXnghampq8PXXX+PNN9/EBx98gC5dumDcuHFYtGgR+vbti9atW2P37t34xz/+gRNOOAHdu3dXnf5ZZ52FQYMG4YUXXsD+/ftx8cUXY/ny5XjttdfQr18/XHrppQnDFxcXo379+vjLX/6C7OxsXHvttQm/n3zyyXj00UcxevRobNmyBf369UP9+vWxefNmvPPOOxgyZAj+8pe/WFzj3kjHZSIiIncw2CYiInLAU089hdmzZ6OkpAQvvPACqqqq0KpVK9x555144IEHYj2En3766XjrrbfwwAMP4C9/+QsKCgpwxx134LjjjkvqCVsuKysLc+bMwTPPPIMZM2bgnXfeQZ06dXDSSSfh7rvvjlVrvuqqq7Blyxa88sor+Pnnn3Hsscfi4osvxtixY2Mdgal56aWXcNJJJ2H69Ol45513UFBQgNGjR+Ohhx5KGjY/Px9XXXUVZs6cicLCQjRt2jRpmFGjRuG0007DM888g7FjxwIQ2pb37t0bV111lZFV6zvpuExEROS8UFSpzhsRERERERERWcY220REREREREQOY7BNRERERERE5DAG20REREREREQOY7BNRERERERE5DAG20REREREREQOY7BNRERERERE5DC+ZzuFIpEIduzYgfr16yMUCnldHCIiIiIiIjIgGo3i119/RYsWLZCVZSxnzWA7hXbs2IGWLVt6XQwiIiIiIiKyYPv27TjhhBMMDctgO4Xq168PQNhADRo0cGy64XAYCxYsQO/evZGTk+PYdMlZ3E7+xu3jf9xG/sbt43/cRv7G7RMM3E7+5ub2qaioQMuWLWMxnREMtlNIrDreoEEDx4PtOnXqoEGDBjzofYzbyd+4ffyP28jfuH38j9vI37h9goHbyd9SsX3MNAdmB2lEREREREREDmOwTUREREREROQwBttEREREREREDmObbSIiIiIiogCKRCKoqqryuhi+EQ6HUatWLRw9ehQ1NTWmx8/NzTX8Wi8jGGwTEREREREFTFVVFTZv3oxIJOJ1UXwjGo2ioKAA27dvN9WRmSgrKwtt2rRBbm6uI+VhsE1ERERERBQg0WgUO3fuRHZ2Nlq2bOloNjbIIpEIDh48iHr16pleJ5FIBDt27MDOnTvRqlUrS8G6HINtIiIiIiKiAKmursbhw4fRokUL1KlTx+vi+IZYrT4/P9/SA4jjjjsOO3bsQHV1tSOvDuMjECIiIiIiogAR2yM7Vd2ZBOL6tNLeWwmDbSIiIiIiogByoqozxTm9PhlsExERERERETmMwTYREREREREFwvTp09GoUSOvi2EIg20iIiIiIiJKiT179uCOO+5Aq1atkJeXh4KCAhQVFWHJkiVeF81x7I2ciIiIiIiIUuLaa69FVVUVXnvtNZx00knYtWsXFi5ciF9++cXrojmOmW0iIiIiIiJy3f79+7F48WI88cQTuPTSS9G6dWucd955GD16NK666ioAwMSJE9GhQwfUrVsXLVu2xJ133omDBw9qTvd///sfzjnnHNSpUwedOnXCuHHjUF1dDUB4J/nDDz8cy6S3aNECd911l+vLCjCzTUREREREFGjRKHD4sDfzrlMHMNqJd7169VCvXj3MmTMH559/PvLy8pKGycrKwuTJk9GmTRv88MMPuPPOO3HffffhH//4h+I0Fy9ejJtvvhmTJ0/GhRdeiLVr12LkyJEIhUJ46KGH8N///hfPPPMMXn/9dbRr1w7l5eVYs2aNnUU2jME2ERERERFRgB0+DNSr5828Dx4E6tY1NmytWrUwffp03HbbbZg2bRrOOeccXHzxxRgwYAA6duwIABg+fHhs+BNPPBGPPvoobr/9dtVge+zYsRg1ahQGDRqESCSCY489NvbdQw89hG3btqGgoACFhYXIyclBq1atcN5559ldbENYjZyIiIiIiIhS4tprr8WOHTswd+5cXH755fjkk09wzjnnYPr06QCADz/8ED179sTxxx+P+vXr46abbsIvv/yCwyqp+zVr1mDcuHGoV68eGjRogBNOOAF/+tOfsHPnThw+fBj9+/fHkSNHcNJJJ+G2227DO++8E6ti7jZmtomIiIiIiDTs2QMsXAhccYXXJVFWp46QYfZq3mbl5+ejV69e6NWrFx588EHceuuteOihh3DJJZfgiiuuwB133IHHHnsMTZo0wWeffYbBgwejqqoKdRRmdvDgQYwdOxa/+93vEIlEcPDgQdSrVw9ZWVnIz89Hy5YtsWnTJnz44YcoLS3FnXfeiSeffBKffvopcnJyHFgD6hhsExERERERaejRA9i0CfjLX7LQvbvXpUkWChmvyu1HZ555JubMmYOVK1ciEong6aefRlaWUAn7zTff1Bz3nHPOwaZNm3DKKacgEomgoqICDRo0iI0PALVr18aVV16JK6+8EkOHDkXbtm2xdu1anHPOOa4uF4NtIiIiIiIiDZs2Cf/PmePPYDsofvnlF/Tv3x9//OMf0bFjR9SvXx8rVqzAhAkTcPXVV+OUU05BOBzGlClTcOWVV2LJkiWYNm2a5jTHjBmDK664Aq1atcLvfvc7HD58GN9//z02bNiARx99FNOnT0dNTQ26du2KOnXq4N///jdq166N1q1bu768bLNNRERERERErqtXrx66du2KZ555BhdddBHat2+PBx98ELfddhumTp2Ks846CxMnTsQTTzyB9u3bY+bMmRg/frzmNIuKivDuu+9iwYIF6Nq1K3r16oVJkybFgulGjRrhxRdfxIUXXoiOHTviww8/xLx583DMMce4vrzMbBMRERER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giAIgiAIwmFI2SYQCATiXQSCSGhKSkriXQSCSGhoHCKI6KF2RBDREYs2RMp2FeeXX37B1KlT410MwgRKGuBeNm/ejAkTJqC8vDzeRSFMoImoO6FxKHGgNuReqB0lBtSG3Eus2hCl/qrCrF+/Hp07d0ZpaSmWLFmCrl27xrtIhMChQ4dQs2ZNAEzh9ng8cS4RwbNu3Tp07doVJSUlmD17Nvr37x/vIhESCgsLUa1aNQBsouP10jqzW6BxKDGgNuRuqB25H2pD7iaWbYgkXUVZu3YtunTpgsGDB6N3796YOXMmAFpxcxObNm1CvXr1MHbsWACAx+MhC7eLWLt2Lbp164abbroJgwYNwqeffori4mKSkcvYtGkTcnNz8fTTTwMAvF4v9XMugcahxIDakLuhduR+qA25m1i3IVK2qyCrV69Gz549cc899+DDDz9E586d8dZbb6GwsBBer5eUBRewe/dujBgxAu3atcM777yDu+++GwAp3G5h1apV6NmzJ8aNG4fXXnsNXbt2xddff429e/eSjFzEn3/+iaFDh6JevXp44YUXMHnyZAA00XEDNA4lBtSG3A21I/dDbcjdVEobUogqRUFBgZKWlqbce++9wWM7duxQzj77bOXxxx+PY8kIlUAgoHz88cfKoEGDlMWLFyuffvqpkpKSotx9992ac4j4cPjwYSUtLU255557gsdOnjyp5OfnKyNGjCDZuISKigplypQpylVXXaUsWLBAmTx5spKdna1MmjRJcw5R+dA4lBhQG3I31I7cD7Uhd1NZbSgpenWdSCT8fj/mzp2LXr16BY/Vq1cPHTp0wLfffosJEyYAoP3B8cTj8aBnz57IyspCjx490KNHDyiKgptuugmKouCll14KWk9JRpVP9erV8eOPP6J9+/YAWFtJSkpCv379MGvWLBw8eBC1a9cm+cQZr9eLgQMHom7duujTpw/at28PRVEwadIkAMD9998ftCzQ3rnKhcahxIDakLuhduR+qA25m0prQ46p7URCoq6obdiwQUlJSVHefffdOJeIUOEtpOXl5WEW7rKyMuXjjz9W1q9fH68iVmlU+aj/7969W8nIyFCefvrpeBaLEODb0f79+8MsC+Xl5cpXX32l7N+/P15FrPLQOORuqA0lBtSO3Au1ocQgVm2ILNtVgN27d2PXrl04ePAgLrroIni9Xs1KmqIo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\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the sales over time\n",
    "plt.figure(figsize=(10, 6))  # Set the size of the plot\n",
    "plt.plot(sales_by_date.index, sales_by_date.values, label='Sales', color='blue')\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Total Sales')\n",
    "plt.title('Sales over Time')\n",
    "\n",
    "# Rotate the x-axis labels to make them readable\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "# Show a grid for better readability\n",
    "plt.grid(True)\n",
    "\n",
    "# Show the legend\n",
    "plt.legend()\n",
    "\n",
    "# Display the plot\n",
    "plt.tight_layout()  # To avoid clipping of labels\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cadf6ca",
   "metadata": {
    "papermill": {
     "duration": 0.012692,
     "end_time": "2024-12-19T04:55:40.958595",
     "exception": false,
     "start_time": "2024-12-19T04:55:40.945903",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d2a40002",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:40.985126Z",
     "iopub.status.busy": "2024-12-19T04:55:40.984711Z",
     "iopub.status.idle": "2024-12-19T04:55:41.174635Z",
     "shell.execute_reply": "2024-12-19T04:55:41.173476Z"
    },
    "papermill": {
     "duration": 0.205498,
     "end_time": "2024-12-19T04:55:41.176785",
     "exception": false,
     "start_time": "2024-12-19T04:55:40.971287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder,OneHotEncoder\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b1d57329",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:41.204019Z",
     "iopub.status.busy": "2024-12-19T04:55:41.203615Z",
     "iopub.status.idle": "2024-12-19T04:55:41.315425Z",
     "shell.execute_reply": "2024-12-19T04:55:41.314090Z"
    },
    "papermill": {
     "duration": 0.127809,
     "end_time": "2024-12-19T04:55:41.317687",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.189878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# Extract additional features from 'Date'\n",
    "sales_train['Year'] = sales_train['date'].dt.year\n",
    "sales_train['Month'] = sales_train['date'].dt.month\n",
    "sales_train['Day'] = sales_train['date'].dt.day\n",
    "sales_train['Day_of_Week'] = sales_train['date'].dt.day_name()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b14a2333",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:41.347463Z",
     "iopub.status.busy": "2024-12-19T04:55:41.347029Z",
     "iopub.status.idle": "2024-12-19T04:55:41.361433Z",
     "shell.execute_reply": "2024-12-19T04:55:41.360242Z"
    },
    "papermill": {
     "duration": 0.03166,
     "end_time": "2024-12-19T04:55:41.363480",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.331820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert 'Date' to datetime format\n",
    "sales_test['date'] = pd.to_datetime(sales_test['date'])\n",
    "# Extract additional features from 'Date'\n",
    "sales_test['Year'] = sales_test['date'].dt.year\n",
    "sales_test['Month'] =sales_test['date'].dt.month\n",
    "sales_test['Day'] = sales_test['date'].dt.day\n",
    "sales_test['Day_of_Week'] = sales_test['date'].dt.day_name()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "06b070f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:41.392125Z",
     "iopub.status.busy": "2024-12-19T04:55:41.391644Z",
     "iopub.status.idle": "2024-12-19T04:55:41.429685Z",
     "shell.execute_reply": "2024-12-19T04:55:41.428344Z"
    },
    "papermill": {
     "duration": 0.053812,
     "end_time": "2024-12-19T04:55:41.431825",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.378013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Identify categorical columns (these are columns with object or category dtype)\n",
    "categorical_cols = sales_train.select_dtypes(include=['object', 'category']).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2e5f37d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:41.459355Z",
     "iopub.status.busy": "2024-12-19T04:55:41.458930Z",
     "iopub.status.idle": "2024-12-19T04:55:41.561987Z",
     "shell.execute_reply": "2024-12-19T04:55:41.559795Z"
    },
    "papermill": {
     "duration": 0.119693,
     "end_time": "2024-12-19T04:55:41.564540",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.444847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fill missing values in categorical columns\n",
    "for col in categorical_cols:\n",
    "    # Option 1: Fill missing values with a placeholder (e.g., \"Missing\")\n",
    "    sales_train[col] = sales_train[col].fillna('Missing')\n",
    "    sales_test[col] = sales_test[col].fillna('Missing')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "86fbeb89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:41.594752Z",
     "iopub.status.busy": "2024-12-19T04:55:41.594338Z",
     "iopub.status.idle": "2024-12-19T04:55:41.668694Z",
     "shell.execute_reply": "2024-12-19T04:55:41.667646Z"
    },
    "papermill": {
     "duration": 0.091814,
     "end_time": "2024-12-19T04:55:41.670803",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.578989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Handle missing value\n",
    "sales_train.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "62ffc43d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:41.699022Z",
     "iopub.status.busy": "2024-12-19T04:55:41.698464Z",
     "iopub.status.idle": "2024-12-19T04:55:41.709237Z",
     "shell.execute_reply": "2024-12-19T04:55:41.708063Z"
    },
    "papermill": {
     "duration": 0.027231,
     "end_time": "2024-12-19T04:55:41.711057",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.683826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unique_id              0\n",
       "date                   0\n",
       "warehouse              0\n",
       "total_orders           0\n",
       "sell_price_main        0\n",
       "type_0_discount        0\n",
       "type_1_discount        0\n",
       "type_2_discount        0\n",
       "type_3_discount        0\n",
       "type_4_discount        0\n",
       "type_5_discount        0\n",
       "type_6_discount        0\n",
       "holiday                0\n",
       "holiday_name           0\n",
       "product_unique_id      0\n",
       "name                   0\n",
       "L1_category_name_en    0\n",
       "Year                   0\n",
       "Month                  0\n",
       "Day                    0\n",
       "Day_of_Week            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales_test.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c692d774",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:41.738726Z",
     "iopub.status.busy": "2024-12-19T04:55:41.738314Z",
     "iopub.status.idle": "2024-12-19T04:55:41.840780Z",
     "shell.execute_reply": "2024-12-19T04:55:41.839594Z"
    },
    "papermill": {
     "duration": 0.118893,
     "end_time": "2024-12-19T04:55:41.842914",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.724021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Encode categorical features (e.g., warehouse, product names, etc.)\n",
    "le = LabelEncoder()\n",
    "sales_train['warehouse'] = le.fit_transform(sales_train['warehouse'])\n",
    "sales_test['warehouse'] = le.transform(sales_test['warehouse'])\n",
    "sales_train['L1_category_name_en'] = le.fit_transform(sales_train['L1_category_name_en'])\n",
    "sales_test['L1_category_name_en'] = le.transform(sales_test['L1_category_name_en'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6bfdcd0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:41.871696Z",
     "iopub.status.busy": "2024-12-19T04:55:41.871332Z",
     "iopub.status.idle": "2024-12-19T04:55:41.888459Z",
     "shell.execute_reply": "2024-12-19T04:55:41.887396Z"
    },
    "papermill": {
     "duration": 0.034916,
     "end_time": "2024-12-19T04:55:41.890890",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.855974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sales_train['Day'] = le.fit_transform(sales_train['Day'])\n",
    "sales_test['Day'] = le.transform(sales_test['Day'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4b93286f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:41.918151Z",
     "iopub.status.busy": "2024-12-19T04:55:41.917707Z",
     "iopub.status.idle": "2024-12-19T04:55:41.946018Z",
     "shell.execute_reply": "2024-12-19T04:55:41.944545Z"
    },
    "papermill": {
     "duration": 0.04394,
     "end_time": "2024-12-19T04:55:41.947888",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.903948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_id</th>\n",
       "      <th>date</th>\n",
       "      <th>warehouse</th>\n",
       "      <th>total_orders</th>\n",
       "      <th>sales</th>\n",
       "      <th>sell_price_main</th>\n",
       "      <th>availability</th>\n",
       "      <th>type_0_discount</th>\n",
       "      <th>type_1_discount</th>\n",
       "      <th>type_2_discount</th>\n",
       "      <th>...</th>\n",
       "      <th>type_6_discount</th>\n",
       "      <th>holiday</th>\n",
       "      <th>holiday_name</th>\n",
       "      <th>product_unique_id</th>\n",
       "      <th>name</th>\n",
       "      <th>L1_category_name_en</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>Day_of_Week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>0</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Missing</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>1</td>\n",
       "      <td>2021</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>0</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Missing</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>1</td>\n",
       "      <td>2021</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>0</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Missing</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>1</td>\n",
       "      <td>2021</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>0</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Missing</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>1</td>\n",
       "      <td>2021</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3197</td>\n",
       "      <td>2021-02-06</td>\n",
       "      <td>0</td>\n",
       "      <td>7228.0</td>\n",
       "      <td>62.88</td>\n",
       "      <td>42.65</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Missing</td>\n",
       "      <td>1577</td>\n",
       "      <td>Coriander_6</td>\n",
       "      <td>1</td>\n",
       "      <td>2021</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   unique_id       date  warehouse  total_orders  sales  sell_price_main  \\\n",
       "0       3197 2021-02-06          0        7228.0  62.88            42.65   \n",
       "1       3197 2021-02-06          0        7228.0  62.88            42.65   \n",
       "2       3197 2021-02-06          0        7228.0  62.88            42.65   \n",
       "3       3197 2021-02-06          0        7228.0  62.88            42.65   \n",
       "4       3197 2021-02-06          0        7228.0  62.88            42.65   \n",
       "\n",
       "   availability  type_0_discount  type_1_discount  type_2_discount  ...  \\\n",
       "0          0.55              0.0              0.0              0.0  ...   \n",
       "1          0.55              0.0              0.0              0.0  ...   \n",
       "2          0.55              0.0              0.0              0.0  ...   \n",
       "3          0.55              0.0              0.0              0.0  ...   \n",
       "4          0.55              0.0              0.0              0.0  ...   \n",
       "\n",
       "   type_6_discount  holiday  holiday_name  product_unique_id         name  \\\n",
       "0              0.0        0       Missing               1577  Coriander_6   \n",
       "1              0.0        0       Missing               1577  Coriander_6   \n",
       "2              0.0        0       Missing               1577  Coriander_6   \n",
       "3              0.0        0       Missing               1577  Coriander_6   \n",
       "4              0.0        0       Missing               1577  Coriander_6   \n",
       "\n",
       "  L1_category_name_en  Year Month  Day  Day_of_Week  \n",
       "0                   1  2021     2    5     Saturday  \n",
       "1                   1  2021     2    5     Saturday  \n",
       "2                   1  2021     2    5     Saturday  \n",
       "3                   1  2021     2    5     Saturday  \n",
       "4                   1  2021     2    5     Saturday  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "sales_train.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe2d12fb",
   "metadata": {
    "papermill": {
     "duration": 0.013136,
     "end_time": "2024-12-19T04:55:41.974267",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.961131",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "406af2fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:42.001739Z",
     "iopub.status.busy": "2024-12-19T04:55:42.001339Z",
     "iopub.status.idle": "2024-12-19T04:55:45.060915Z",
     "shell.execute_reply": "2024-12-19T04:55:45.059745Z"
    },
    "papermill": {
     "duration": 3.075595,
     "end_time": "2024-12-19T04:55:45.062944",
     "exception": false,
     "start_time": "2024-12-19T04:55:41.987349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import xgboost as xgb\n",
    "import numpy as np\n",
    "\n",
    "import lightgbm as lgb\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.ensemble import StackingRegressor\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6b137ab7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:45.090964Z",
     "iopub.status.busy": "2024-12-19T04:55:45.090054Z",
     "iopub.status.idle": "2024-12-19T04:55:45.157138Z",
     "shell.execute_reply": "2024-12-19T04:55:45.156169Z"
    },
    "papermill": {
     "duration": 0.08292,
     "end_time": "2024-12-19T04:55:45.159091",
     "exception": false,
     "start_time": "2024-12-19T04:55:45.076171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "X =sales_train[['total_orders', 'sell_price_main', 'type_0_discount', 'type_1_discount', \n",
    "           'Day', 'Month', 'Year', 'warehouse', 'L1_category_name_en', \n",
    "            'holiday']]\n",
    "\n",
    "y =sales_train['sales']\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2b8576d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:45.187716Z",
     "iopub.status.busy": "2024-12-19T04:55:45.187367Z",
     "iopub.status.idle": "2024-12-19T04:55:45.192500Z",
     "shell.execute_reply": "2024-12-19T04:55:45.191468Z"
    },
    "papermill": {
     "duration": 0.022008,
     "end_time": "2024-12-19T04:55:45.194437",
     "exception": false,
     "start_time": "2024-12-19T04:55:45.172429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 3. Initialize base models (XGBoost and LightGBM)\n",
    "xgb_model = xgb.XGBRegressor(objective='reg:squarederror', random_state=42)\n",
    "lgbm_model = lgb.LGBMRegressor(objective='regression', random_state=42)\n",
    "\n",
    "# 4. Initialize the Stacking Regressor using a linear model as the meta-model\n",
    "model = StackingRegressor(\n",
    "    estimators=[('xgb', xgb_model), ('lgbm', lgbm_model)],\n",
    "    final_estimator=LinearRegression()  # You can use other meta-models (e.g., Ridge, SVR, etc.)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6933ed3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:45.224070Z",
     "iopub.status.busy": "2024-12-19T04:55:45.223636Z",
     "iopub.status.idle": "2024-12-19T04:55:55.463473Z",
     "shell.execute_reply": "2024-12-19T04:55:55.462262Z"
    },
    "papermill": {
     "duration": 10.256661,
     "end_time": "2024-12-19T04:55:55.465263",
     "exception": false,
     "start_time": "2024-12-19T04:55:45.208602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.010976 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 835\n",
      "[LightGBM] [Info] Number of data points in the train set: 224414, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 109.604044\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016216 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 833\n",
      "[LightGBM] [Info] Number of data points in the train set: 179531, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 110.113760\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016532 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 834\n",
      "[LightGBM] [Info] Number of data points in the train set: 179531, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 109.620459\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015355 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 835\n",
      "[LightGBM] [Info] Number of data points in the train set: 179531, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 109.309592\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016224 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 833\n",
      "[LightGBM] [Info] Number of data points in the train set: 179531, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 109.665481\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016022 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 835\n",
      "[LightGBM] [Info] Number of data points in the train set: 179532, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 109.310931\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StackingRegressor(estimators=[(&#x27;xgb&#x27;,\n",
       "                               XGBRegressor(base_score=None, booster=None,\n",
       "                                            callbacks=None,\n",
       "                                            colsample_bylevel=None,\n",
       "                                            colsample_bynode=None,\n",
       "                                            colsample_bytree=None, device=None,\n",
       "                                            early_stopping_rounds=None,\n",
       "                                            enable_categorical=False,\n",
       "                                            eval_metric=None,\n",
       "                                            feature_types=None, gamma=None,\n",
       "                                            grow_policy=None,\n",
       "                                            importance_type=None,\n",
       "                                            interaction_constraints=None,\n",
       "                                            learning_ra...\n",
       "                                            max_cat_threshold=None,\n",
       "                                            max_cat_to_onehot=None,\n",
       "                                            max_delta_step=None, max_depth=None,\n",
       "                                            max_leaves=None,\n",
       "                                            min_child_weight=None, missing=nan,\n",
       "                                            monotone_constraints=None,\n",
       "                                            multi_strategy=None,\n",
       "                                            n_estimators=None, n_jobs=None,\n",
       "                                            num_parallel_tree=None,\n",
       "                                            random_state=42, ...)),\n",
       "                              (&#x27;lgbm&#x27;,\n",
       "                               LGBMRegressor(objective=&#x27;regression&#x27;,\n",
       "                                             random_state=42))],\n",
       "                  final_estimator=LinearRegression())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StackingRegressor</label><div class=\"sk-toggleable__content\"><pre>StackingRegressor(estimators=[(&#x27;xgb&#x27;,\n",
       "                               XGBRegressor(base_score=None, booster=None,\n",
       "                                            callbacks=None,\n",
       "                                            colsample_bylevel=None,\n",
       "                                            colsample_bynode=None,\n",
       "                                            colsample_bytree=None, device=None,\n",
       "                                            early_stopping_rounds=None,\n",
       "                                            enable_categorical=False,\n",
       "                                            eval_metric=None,\n",
       "                                            feature_types=None, gamma=None,\n",
       "                                            grow_policy=None,\n",
       "                                            importance_type=None,\n",
       "                                            interaction_constraints=None,\n",
       "                                            learning_ra...\n",
       "                                            max_cat_threshold=None,\n",
       "                                            max_cat_to_onehot=None,\n",
       "                                            max_delta_step=None, max_depth=None,\n",
       "                                            max_leaves=None,\n",
       "                                            min_child_weight=None, missing=nan,\n",
       "                                            monotone_constraints=None,\n",
       "                                            multi_strategy=None,\n",
       "                                            n_estimators=None, n_jobs=None,\n",
       "                                            num_parallel_tree=None,\n",
       "                                            random_state=42, ...)),\n",
       "                              (&#x27;lgbm&#x27;,\n",
       "                               LGBMRegressor(objective=&#x27;regression&#x27;,\n",
       "                                             random_state=42))],\n",
       "                  final_estimator=LinearRegression())</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>xgb</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lgbm</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMRegressor</label><div class=\"sk-toggleable__content\"><pre>LGBMRegressor(objective=&#x27;regression&#x27;, random_state=42)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>final_estimator</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "StackingRegressor(estimators=[('xgb',\n",
       "                               XGBRegressor(base_score=None, booster=None,\n",
       "                                            callbacks=None,\n",
       "                                            colsample_bylevel=None,\n",
       "                                            colsample_bynode=None,\n",
       "                                            colsample_bytree=None, device=None,\n",
       "                                            early_stopping_rounds=None,\n",
       "                                            enable_categorical=False,\n",
       "                                            eval_metric=None,\n",
       "                                            feature_types=None, gamma=None,\n",
       "                                            grow_policy=None,\n",
       "                                            importance_type=None,\n",
       "                                            interaction_constraints=None,\n",
       "                                            learning_ra...\n",
       "                                            max_cat_threshold=None,\n",
       "                                            max_cat_to_onehot=None,\n",
       "                                            max_delta_step=None, max_depth=None,\n",
       "                                            max_leaves=None,\n",
       "                                            min_child_weight=None, missing=nan,\n",
       "                                            monotone_constraints=None,\n",
       "                                            multi_strategy=None,\n",
       "                                            n_estimators=None, n_jobs=None,\n",
       "                                            num_parallel_tree=None,\n",
       "                                            random_state=42, ...)),\n",
       "                              ('lgbm',\n",
       "                               LGBMRegressor(objective='regression',\n",
       "                                             random_state=42))],\n",
       "                  final_estimator=LinearRegression())"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d6a406b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:55.495422Z",
     "iopub.status.busy": "2024-12-19T04:55:55.495006Z",
     "iopub.status.idle": "2024-12-19T04:55:55.715636Z",
     "shell.execute_reply": "2024-12-19T04:55:55.714331Z"
    },
    "papermill": {
     "duration": 0.238001,
     "end_time": "2024-12-19T04:55:55.718063",
     "exception": false,
     "start_time": "2024-12-19T04:55:55.480062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=model.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85153dd1",
   "metadata": {
    "papermill": {
     "duration": 0.026673,
     "end_time": "2024-12-19T04:55:55.772139",
     "exception": false,
     "start_time": "2024-12-19T04:55:55.745466",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Make Prediction on Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9184d003",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:55.829669Z",
     "iopub.status.busy": "2024-12-19T04:55:55.829113Z",
     "iopub.status.idle": "2024-12-19T04:55:55.835943Z",
     "shell.execute_reply": "2024-12-19T04:55:55.834896Z"
    },
    "papermill": {
     "duration": 0.037416,
     "end_time": "2024-12-19T04:55:55.837712",
     "exception": false,
     "start_time": "2024-12-19T04:55:55.800296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['unique_id', 'date', 'warehouse', 'total_orders', 'sell_price_main',\n",
       "       'type_0_discount', 'type_1_discount', 'type_2_discount',\n",
       "       'type_3_discount', 'type_4_discount', 'type_5_discount',\n",
       "       'type_6_discount', 'holiday', 'holiday_name', 'product_unique_id',\n",
       "       'name', 'L1_category_name_en', 'Year', 'Month', 'Day', 'Day_of_Week'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales_test.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "77173916",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:55.868379Z",
     "iopub.status.busy": "2024-12-19T04:55:55.867941Z",
     "iopub.status.idle": "2024-12-19T04:55:55.875634Z",
     "shell.execute_reply": "2024-12-19T04:55:55.874420Z"
    },
    "papermill": {
     "duration": 0.025464,
     "end_time": "2024-12-19T04:55:55.877441",
     "exception": false,
     "start_time": "2024-12-19T04:55:55.851977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "X_test =sales_test[['total_orders', 'sell_price_main', 'type_0_discount', 'type_1_discount', \n",
    "           'Day', 'Month', 'Year', 'warehouse', 'L1_category_name_en', \n",
    "            'holiday']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2fe120a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:55.909469Z",
     "iopub.status.busy": "2024-12-19T04:55:55.909048Z",
     "iopub.status.idle": "2024-12-19T04:55:55.933246Z",
     "shell.execute_reply": "2024-12-19T04:55:55.932083Z"
    },
    "papermill": {
     "duration": 0.042806,
     "end_time": "2024-12-19T04:55:55.935880",
     "exception": false,
     "start_time": "2024-12-19T04:55:55.893074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Make predictions\n",
    "\n",
    "prediction= model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fb1a3e8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:55.967898Z",
     "iopub.status.busy": "2024-12-19T04:55:55.967520Z",
     "iopub.status.idle": "2024-12-19T04:55:55.989842Z",
     "shell.execute_reply": "2024-12-19T04:55:55.988725Z"
    },
    "papermill": {
     "duration": 0.041819,
     "end_time": "2024-12-19T04:55:55.992320",
     "exception": false,
     "start_time": "2024-12-19T04:55:55.950501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 3. Generate predictions for test set using the trained model\n",
    "sales_test['sales_hat'] = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a43a151e",
   "metadata": {
    "papermill": {
     "duration": 0.013787,
     "end_time": "2024-12-19T04:55:56.021584",
     "exception": false,
     "start_time": "2024-12-19T04:55:56.007797",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Create Submission File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "20080540",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:56.052802Z",
     "iopub.status.busy": "2024-12-19T04:55:56.052451Z",
     "iopub.status.idle": "2024-12-19T04:55:56.063590Z",
     "shell.execute_reply": "2024-12-19T04:55:56.062309Z"
    },
    "papermill": {
     "duration": 0.028646,
     "end_time": "2024-12-19T04:55:56.065445",
     "exception": false,
     "start_time": "2024-12-19T04:55:56.036799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 4. Create the 'id' column as unique_id_date\n",
    "sales_test['id'] =sales_test['unique_id'].astype(str) + '_' + sales_test['date'].dt.strftime('%Y-%m-%d')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "03169f71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:56.096094Z",
     "iopub.status.busy": "2024-12-19T04:55:56.095724Z",
     "iopub.status.idle": "2024-12-19T04:55:56.101053Z",
     "shell.execute_reply": "2024-12-19T04:55:56.099758Z"
    },
    "papermill": {
     "duration": 0.022308,
     "end_time": "2024-12-19T04:55:56.102944",
     "exception": false,
     "start_time": "2024-12-19T04:55:56.080636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 5. Prepare the submission DataFrame with the required format\n",
    "submission =sales_test[['id', 'sales_hat']]  # Only keep 'id' and 'sales_hat' columns for the submission file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5d47870e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:56.133242Z",
     "iopub.status.busy": "2024-12-19T04:55:56.132831Z",
     "iopub.status.idle": "2024-12-19T04:55:56.140001Z",
     "shell.execute_reply": "2024-12-19T04:55:56.138843Z"
    },
    "papermill": {
     "duration": 0.024696,
     "end_time": "2024-12-19T04:55:56.141969",
     "exception": false,
     "start_time": "2024-12-19T04:55:56.117273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission = submission.drop_duplicates(subset='id', keep='first')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "293928be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:56.172457Z",
     "iopub.status.busy": "2024-12-19T04:55:56.172073Z",
     "iopub.status.idle": "2024-12-19T04:55:56.181032Z",
     "shell.execute_reply": "2024-12-19T04:55:56.179963Z"
    },
    "papermill": {
     "duration": 0.026345,
     "end_time": "2024-12-19T04:55:56.182949",
     "exception": false,
     "start_time": "2024-12-19T04:55:56.156604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 6. Save the submission file\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ceeeb2e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-19T04:55:56.213258Z",
     "iopub.status.busy": "2024-12-19T04:55:56.212864Z",
     "iopub.status.idle": "2024-12-19T04:55:56.221829Z",
     "shell.execute_reply": "2024-12-19T04:55:56.220837Z"
    },
    "papermill": {
     "duration": 0.025716,
     "end_time": "2024-12-19T04:55:56.223666",
     "exception": false,
     "start_time": "2024-12-19T04:55:56.197950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>sales_hat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2947_2024-06-04</td>\n",
       "      <td>99.513786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>662_2024-06-16</td>\n",
       "      <td>70.405018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1252_2024-06-12</td>\n",
       "      <td>40.707917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>3668_2024-06-14</td>\n",
       "      <td>219.079878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1731_2024-06-05</td>\n",
       "      <td>16.984669</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id   sales_hat\n",
       "0   2947_2024-06-04   99.513786\n",
       "7    662_2024-06-16   70.405018\n",
       "14  1252_2024-06-12   40.707917\n",
       "21  3668_2024-06-14  219.079878\n",
       "28  1731_2024-06-05   16.984669"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6912c5b",
   "metadata": {
    "papermill": {
     "duration": 0.014621,
     "end_time": "2024-12-19T04:55:56.253031",
     "exception": false,
     "start_time": "2024-12-19T04:55:56.238410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 10173359,
     "sourceId": 88742,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 32.476519,
   "end_time": "2024-12-19T04:55:57.188568",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-19T04:55:24.712049",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
